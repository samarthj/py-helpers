[tool.poetry]
authors     = ["Sam <dev@samarthj.com>"]
classifiers = ["Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Logging"]
description = "Helpers for common functional work done across several projects"
homepage    = "https://github.com/samarthj/pylib-helpers"
license     = "LGPL-3.0-or-later"
name        = "pylib-helpers"
packages    = [{include = "helpers"}]
readme      = "README.md"
repository  = "https://github.com/samarthj/pylib-helpers"

version = "0.3.126"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/samarthj/pylib-helpers/issues"

[tool.poetry.dependencies]
colorama = "^0.4.4"
python   = ">=3.9,<4.0"

[tool.poetry.group.build.dependencies]
commitizen = "*"

[tool.poetry.group.dev.dependencies]
flake8-comprehensions        = "*"
flake8-expression-complexity = "*"
flake8-functions             = "*"
flake8-simplify              = "*"
flake8-use-fstring           = "*"
mccabe                       = "*"
pep8-naming                  = "*"

[tool.poetry.group.formatting.dependencies]
black        = "*"
flake8-black = "*"
flake8-isort = "*"
isort        = "*"
pycln        = "*"

[tool.poetry.group.lint.dependencies]
autopep8         = "*"
flake8           = "*"
mypy             = "*"
pylint           = "*"
pyproject-flake8 = "*"

[tool.poetry.group.other.dependencies]
rope = "*"

[tool.poetry.group.security.dependencies]
bandit        = "*"
flake8-bandit = "*"

[tool.poetry.group.test.dependencies]
flake8-pytest       = "*"
flake8-pytest-style = "*"
pytest              = "*"

[build-system]
build-backend = "poetry.core.masonry.api"
requires      = ["poetry-core"]

## Poe the Poet -- task definitions for global environment
[tool.poe.tasks]
format         = {cmd = "black --config pyproject.toml --color .", help = "Format code using black config"}
format-imports = {cmd = "isort --settings-file pyproject.toml --color .", help = "Optimize and sort imports"}
format-pycln   = {cmd = "pycln --config pyproject.toml .", help = "Remove unused imports"}
lint           = {cmd = "pflake8", help = "Print lint errors"}
lint-plugins   = {cmd = "pflake8 --version", help = "Print plugins used for linting"}
style          = {cmd = "black --config pyproject.toml --color --diff .", help = "Check code style"}
style-imports  = {cmd = "isort --settings-file pyproject.toml --color --diff .", help = "Check code style"}
style-pycln    = {cmd = "pycln --diff --config pyproject.toml .", help = "Check code style"}
test           = {cmd = "pytest", help = "Run the tests"}

clean = """
rm -rf .mypy_cache
       .pytest_cache
       .venv
       poetry.lock
       dist
       build
       ./**/__pycache__
       __pypackages__
"""

[tool.black]
line_length = 120

[tool.isort]
ensure_newline_before_comments = true
extend_skip                    = [".vscode", ".venv", "__pypackages__"]
force_grid_wrap                = 0
force_sort_within_sections     = true
group_by_package               = true
import_heading_stdlib          = "StdLib"
include_trailing_comma         = true
lexicographical                = true
line_length                    = 120
multi_line_output              = 3
profile                        = "black"
remove_redundant_aliases       = true
src_paths                      = ["helpers", "tests"]
use_parentheses                = true

[tool.flake8]
black-config              = 'pyproject.toml'
extend-exclude            = [".venv", "util", "experiments"]
extend-ignore             = "E203,E501,W503,C0330,C0326,S101,S603,E722"
indent-size               = 4
max-complexity            = 10
max-expression-complexity = 10
max-line-length           = 120
max-returns-amount        = 5
show-source               = "true"

[tool.pytest.ini_options]
addopts    = "-ra"
pythonpath = [".", "helpers"]
testpaths  = ["tests"]

[tool.pycln]
all          = true
exclude      = '(__pypackages__|__pycache__|\.pytest_cache|\.github|\.git|\.venv|\.mypy_cache|\.vscode)'
expand_stars = true
include      = '.*\.py$'
no_gitignore = false
paths        = ["helpers", "tests"]
verbose      = true

[tool.semantic_release]
branch                = "main"
build_command         = "pip install poetry && poetry build"
changelog_capitalize  = false
changelog_components  = "semantic_release.changelog.changelog_headers,semantic_release.changelog.compare_url"
changelog_file        = "CHANGELOG.md"
changelog_sections    = "feature,fix,breaking,documentation,performance,revert,test,build"
commit_author         = "Github Action <action@github.com>"
commit_parser         = "semantic_release.history.angular_parser"
commit_subject        = "ci: {version}"
ignore_token_for_push = true
major_on_zero         = false
pre_commit_command    = "git status && git commit -v -a --no-edit --amend"
remove_dist           = true
tag_commit            = true
upload_to_pypi        = false
upload_to_release     = true
version_toml          = ['pyproject.toml:tool.poetry.version']
