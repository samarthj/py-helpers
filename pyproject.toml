[tool.poetry]
authors = ["Sam <dev@samarthj.com>"]
classifiers = [
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Logging",
]
description = "Helpers for common functional work done across several projects"
homepage = "https://github.com/samarthj/pylib-helpers"
license = "GPL-3.0-or-later"
name = "pylib-helpers"
packages = [{include = "helpers"}]
readme = "README.md"
repository = "https://github.com/samarthj/pylib-helpers"

version = "0.3.4"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/samarthj/pylib-helpers/issues"

[tool.poetry.dependencies]
colorama = {version = "^0.4.4", allow-prereleases = true}
python   = ">=3.9,<4.0"

[tool.poetry.dev-dependencies]
autopep8                     = {version = "*", allow-prereleases = true}
bandit                       = {version = "*", allow-prereleases = true}
black                        = {version = "*", allow-prereleases = true}
colorama                     = {version = "*", allow-prereleases = true}
commitizen                   = {version = "*", allow-prereleases = true}
flake8                       = {version = "*", allow-prereleases = true}
flake8-bandit                = {version = "*", allow-prereleases = true}
flake8-black                 = {version = "*", allow-prereleases = true}
flake8-comprehensions        = {version = "*", allow-prereleases = true}
flake8-expression-complexity = {version = "*", allow-prereleases = true}
flake8-functions             = {version = "*", allow-prereleases = true}
flake8-isort                 = {version = "*", allow-prereleases = true}
flake8-pytest                = {version = "*", allow-prereleases = true}
flake8-pytest-style          = {version = "*", allow-prereleases = true}
flake8-simplify              = {version = "*", allow-prereleases = true}
flake8-use-fstring           = {version = "*", allow-prereleases = true}
isort                        = {version = "*", allow-prereleases = true}
mccabe                       = {version = "*", allow-prereleases = true}
mypy                         = {version = "*", allow-prereleases = true}
pep8-naming                  = {version = "*", allow-prereleases = true}
pycln                        = {version = "*", allow-prereleases = true, python = ">=3.9,<3.10"}
pylint                       = {version = "*", allow-prereleases = true}
pyproject-flake8             = {version = "*", allow-prereleases = true}
pytest                       = {version = "*", allow-prereleases = true}
rope                         = {version = "*", allow-prereleases = true}

[build-system]
build-backend = "poetry.core.masonry.api"
requires      = ["poetry-core>=1.0.0"]

## Poe the Poet -- task definitions for global environment
[tool.poe.tasks]
format         = {cmd = "black --config pyproject.toml --color .", help = "Format code using black config"}
format-imports = {cmd = "isort --settings-file pyproject.toml --color .", help = "Optimize and sort imports"}
format-pycln   = {cmd = "pycln --config pyproject.toml .", help = "Remove unused imports"}
lint           = {cmd = "pflake8", help = "Print lint errors"}
lint-plugins   = {cmd = "pflake8 --version", help = "Print plugins used for linting"}
style          = {cmd = "black --config pyproject.toml --color --diff .", help = "Check code style"}
style-imports  = {cmd = "isort --settings-file pyproject.toml --color --diff .", help = "Check code style"}
style-pycln    = {cmd = "pycln --diff --config pyproject.toml .", help = "Check code style"}
test           = {cmd = "pytest", help = "Run the tests"}

clean = """
rm -rf .mypy_cache
       .pytest_cache
       .venv
       poetry.lock
       dist
       build
       ./**/__pycache__
       __pypackages__
"""

[tool.black]
line_length = 120

[tool.isort]
ensure_newline_before_comments = true
extend_skip                    = [".vscode"]
force_grid_wrap                = 0
force_sort_within_sections     = true
group_by_package               = true
import_heading_stdlib          = "StdLib"
include_trailing_comma         = true
lexicographical                = true
line_length                    = 120
multi_line_output              = 3
profile                        = "black"
remove_redundant_aliases       = true
src_paths                      = ["helpers", "tests"]
use_parentheses                = true

[tool.flake8]
black-config              = 'pyproject.toml'
extend-exclude            = [".venv", "util", "experiments"]
extend-ignore             = "E203,E501,W503,C0330,C0326,S101,S603,E722"
indent-size               = 4
max-complexity            = 10
max-expression-complexity = 10
max-line-length           = 120
max-returns-amount        = 5
show-source               = "true"

[tool.pytest.ini_options]
addopts   = "-ra"
testpaths = ["tests"]

[tool.pycln]
all          = true
exclude      = '(__pypackages__|__pycache__|\.pytest_cache|\.github|\.git|\.venv|\.mypy_cache|\.vscode)'
expand_stars = true
include      = '(helpers|tests).*\.py$'
no_gitignore = false
verbose      = false

[tool.semantic_release]
branch         = "main"
build_command  = "pip install poetry && poetry build"
commit_author  = "dev@samarthj.com"
commit_parser  = "semantic_release.history.emoji_parser"
commit_subject = "{version} via python-semantic-release"
patch_emoji    = ":ambulance:, :lock:, :bug:, :zap:, :goal_net:, :alien:, :wheelchair:, :speech_balloon:, :mag:, :apple:, :penguin:, :checkered_flag:, :robot:, :green_apple:, :bookmark:, :construction_worker:"
remove_dist    = true
upload_to_pypi = true
version_toml   = ['pyproject.toml:tool.poetry.version']
