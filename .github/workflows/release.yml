name: Daily Release

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 1

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          check-latest: true
      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Load pip cache
        id: pip-cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-poetry-poe-
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-poetry-poe-
            ${{ runner.os }}-${{ matrix.python-version }}-pip-poetry-
            ${{ runner.os }}-${{ matrix.python-version }}-pip-
      - name: Install system dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade poetry poethepoet
      - name: Get poetry cache dir
        id: poetry-cache-dir
        run: |
          echo "::set-output name=dir::$(poetry config cache-dir)"
      - name: Load poetry cache
        id: poetry-cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.poetry-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ github.repository }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ github.repository }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ github.repository }}-${{ hashFiles('pyproject.toml') }}
            ${{ runner.os }}-${{ matrix.python-version }}-poetry-${{ github.repository }}

      - name: Update the project
        id: update
        continue-on-error: true
        run: |
          echo "::group::Configure poetry"
          poetry config --list
          poetry check
          echo "::endgroup::"

          echo "::group::Run poetry update"
          poetry install --sync --no-root
          poetry update
          poetry show --tree
          echo "::endgroup::"

          echo "::group::Run pycln"
          poe style-pycln
          poe format-pycln
          echo "::endgroup::"

          echo "::group::Run isort"
          poe style-imports
          poe format-imports
          echo "::endgroup::"

          echo "::group::Run black"
          poe style
          poe format
          echo "::endgroup::"

          echo "::group::Run pytest"
          poe test
          echo "::endgroup::"

      - name: Run linting
        id: lint
        continue-on-error: true
        run: |
          poe lint-plugins
          # exit-zero treats all errors as warnings.
          poe lint --count --exit-zero --statistics || true

      - name: Import GPG key
        if: ${{ steps.update.outcome == 'success' }}
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.PGP_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Setup git config
        if: ${{ steps.update.outcome == 'success' }}
        id: git
        run: |
          echo "::group::Setup git config"
          echo "=============================="
          git config user.name "Github Action"
          git config user.email action@github.com
          # git config user.signkey dev@samarthj.com
          # git config commit.gpgsign true
          git config init.defaultBranch main
          # git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          echo "::endgroup::"

          echo "::group::Commit changes"
          git add .
          git status
          git commit -m "ci(github-actions): :construction_worker: update, format, lint, test" || true
          git pull --rebase
          echo "::endgroup::"

      - name: Github Release
        id: github_release
        if: ${{ steps.git.outcome == 'success' }}
        continue-on-error: true
        run: poetry run cz bump --changelog

      - name: Build with poetry
        id: build
        if: ${{ steps.github_release.outcome == 'success' }}
        continue-on-error: true
        run: poetry build -v --no-interaction

      - name: Publish distribution ðŸ“¦ to Test PyPI
        id: test_pypi
        if: ${{ steps.build.outcome == 'success' }}
        continue-on-error: true
        run: |
          poetry publish -r testpypi -u __token__ -p ${{ secrets.TEST_PYPI_TOKEN }} --no-interaction

      - name: Publish distribution ðŸ“¦ to PyPI
        id: pypi
        if: ${{ steps.test_pypi.outcome == 'success' }}
        continue-on-error: true
        run: |
          poetry publish -u __token__ -p ${{ secrets.PYPI_API_TOKEN }} --no-interaction
