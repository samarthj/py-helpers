name: Daily Release

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: Get pip cache dir
        id: pip-cache-dir
        shell: bash
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Load pip cache
        id: pip-cache
        uses: actions/cache@main
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-pip-poetry-poe-pycln
          restore-keys: |
            ${{ runner.os }}-pip-poetry-poe-pycln
      - name: Install system dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install poetry poethepoet pycln
      - name: Get poetry cache dir
        id: poetry-cache-dir
        shell: bash
        run: |
          echo "::set-output name=dir::$(poetry config cache-dir)"
      - name: Load poetry cache
        id: poetry-cache
        uses: actions/cache@main
        with:
          path: |
            ${{ steps.poetry-cache-dir.outputs.dir }}
            ./.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Update the project
        id: update
        continue-on-error: true
        run: |

          echo "=============================="
          echo "Run poetry update"
          echo "++++++++++++++++++++++++++++++"
          poetry update
          poetry install --remove-untracked
          poetry config --list

          echo "=============================="
          echo "Run pycln"
          echo "++++++++++++++++++++++++++++++"
          poe style-pycln
          poe format-pycln

          echo "=============================="
          echo "Run isort"
          echo "++++++++++++++++++++++++++++++"
          poe style-imports
          poe format-imports

          echo "=============================="
          echo "Run black"
          echo "++++++++++++++++++++++++++++++"
          poe style
          poe format

          echo "=============================="
          echo "Run pytest"
          echo "++++++++++++++++++++++++++++++"
          poe test

          echo "=============================="
          echo "Run linting"
          echo "++++++++++++++++++++++++++++++"
          poe lint-plugins
          # exit-zero treats all errors as warnings.
          poe lint --count --exit-zero --statistics || true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.PGP_PRIVATE_KEY }}
          git-user-signingkey: true

      - name: Setup git config
        if: ${{ steps.update.outcome == 'success' }}
        id: git
        run: |
          echo "::set-output name=diff::$(git diff FETCH_HEAD --stat)"
          echo "=============================="
          echo "Setup git config"
          echo "++++++++++++++++++++++++++++++"
          git config user.name "Sam"
          git config user.email dev@samarthj.com
          git config user.signkey dev@samarthj.com
          git config init.defaultBranch main
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          git add .
          git status
          git commit -S -m "ci(github-actions): :construction_worker: update, format, lint, test" || true

      - name: Python Semantic Release
        id: github_release
        if: ${{ steps.git.outcome == 'success' }}
        uses: relekang/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pypi_token: ${{ secrets.PYPI_API_TOKEN }}
