name: Daily Release

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          architecture: 'x64'
      - name: Get pip cache dir
        id: pip-cache-dir
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Load pip cache
        id: pip-cache
        uses: actions/cache@main
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-pip-poetry-poe-semver
          restore-keys: |
            ${{ runner.os }}-pip-poetry-poe-semver
      - name: Install system dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry poethepoet poetry-dynamic-versioning

      - name: Get poetry cache dir
        id: poetry-cache-dir
        run: |
          echo "::set-output name=dir::$(poetry config cache-dir)"
      - name: Load poetry cache
        id: poetry-cache
        uses: actions/cache@main
        with:
          path: |
            ${{ steps.poetry-cache-dir.outputs.dir }}
            ./.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Update the dependencies using poetry
        run: |
          poetry update
          poetry install --remove-untracked
          poetry config --list

      - name: Format with isort
        run: poe format-imports
      - name: Format with black
        run: poe format

      - name: Test with pytest
        run: poe test
      - name: Lint with flake8
        run: |
          # Show the plugins used for linting
          poe lint-plugins
          # exit-zero treats all errors as warnings.
          poe lint --count --exit-zero --statistics

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.PGP_PRIVATE_KEY }}
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true

      - name: Setup git config
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "Sam"
          git config --global user.email dev@samarthj.com
          git config --global user.signkey dev@samarthj.com
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true
          git config --global init.defaultBranch main
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Delete Prerelease
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          prerelease="$(gh release list | grep -i pre-release | cut -f1)"
          echo $prerelease
          if [[ -n "${prerelease}" ]]; then
            echo "Current pre-release - $prerelease"
            gh release delete -y "${prerelease}" || true
            major="$(echo $prerelease | sed -re 's|^v([0-9]+).([0-9]+).([0-9]+)(.*)|\1|g')"
            minor="$(echo $prerelease | sed -re 's|^v([0-9]+).([0-9]+).([0-9]+)(.*)|\2|g')"
            pre_maj_min="v${major}.${minor}*"
            echo "Delete pre-release tag if exists - $(git tag -l "$pre_maj_min")"
            git tag -l "$pre_maj_min" | xargs -I{} git push --delete origin {} || true
            git tag -l "$pre_maj_min" | xargs -I{} git tage --delete {} || true
          fi

      - name: Version Evaluation
        id: version
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          prev_release="$(gh release list | grep -i latest | cut -f1)"
          poetry-dynamic-versioning
          echo "dynamic: $(poetry version -s) release: $prev_release"
          version_base="$(poetry version -s | sed -re 's|^([0-9.]+)([abrc]*)([0-9]*)|\1|g')"
          version_stage="$(poetry version -s | sed -re 's|^([0-9.]+)([abrc]*)([0-9]*)|\2|g')"
          version_revision="$(poetry version -s | sed -re 's|^([0-9.]+)([abrc]*)([0-9]*)|\3|g')"
          echo "::set-output name=version_base::$version_base"
          echo "::set-output name=version_stage::$version_stage"
          echo "::set-output name=version_revision::$version_revision"
          echo "::set-output name=version_full::$(poetry version -s)"
          echo "$version_base $version_stage $version_revision $version_full"
          poetry version minor
          next_base="$(poetry version -s | sed -re 's|^([0-9.]+)([abrc]*)([0-9]*)|\1|g')"
          major="$(echo $next_base | sed -re 's|^([0-9]+).([0-9]+).([0-9]+)|\1|g')"
          minor="$(echo $next_base | sed -re 's|^([0-9]+).([0-9]+).([0-9]+)|\2|g')"
          next_release="${major}.${minor}.${version_revision}"
          next_prerelease="${next_base}${version_stage}${version_revision}"
          echo "$next_base $next_release $next_prerelease"
          echo "::set-output name=next_tag::$next_release"
          echo "::set-output name=next_base::$next_base"
          echo "::set-output name=next_release::$next_release"
          echo "::set-output name=next_prerelease::${next_prerelease}"

      - name: Release Evaluation ${{ steps.version.outputs.next_release }}
        id: release
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          [[ "${{ steps.version.outputs.version_stage }}" == "rc" ]] && [[ ${{ steps.version.outputs.version_revision }} -gt 3 ]]

      - name: Set Release Version ${{ steps.version.outputs.version_full }} -> ${{ steps.version.outputs.next_release }}
        id: set_release
        if: ${{ steps.release.outcome == 'success' }}
        run: |
          poetry version ${{ steps.version.outputs.next_release }}
      - name: Set Prerelease Version ${{ steps.version.outputs.version_full }} -> ${{ steps.version.outputs.next_prerelease }}
        id: set_prerelease
        if: ${{ steps.release.outcome == 'failure' }}
        shell: bash
        run: |
          poetry version ${{ steps.version.outputs.next_prerelease }}

      - name: Commit ${{ steps.version.outputs.next_release }}
        id: commit
        if: ${{ (steps.set_release.outcome == 'success') || (steps.set_prerelease.outcome == 'success') }}
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add .
          git status
          git commit -S -m "ci(github-actions): :construction_worker: v$(poetry version -s)"
          poetry run cz changelog --unreleased-version "v$(poetry version -s)"

      - name: Release ${{ steps.version.outputs.next_release }}
        id: github_release
        if: ${{ (steps.set_release.outcome == 'success') && (steps.commit.outcome == 'success') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prev_release="$(gh release list | grep -i latest | cut -f1)"
          echo $prev_release
          [[ "v${{ steps.version.outputs.next_release }}" == "${prev_release}" ]] && exit 0
          git tag "v${{ steps.version.outputs.next_release }}" -m "v${{ steps.version.outputs.next_release }}"
          git push --follow-tags
          poetry build
          echo "" > NEW_RELEASE.md
          poetry run cz changelog --unreleased-version "v${{ steps.version.outputs.next_release }}" --start-rev "${prev_release}" --file-name NEW_RELEASE.md || true
          gh release create "v${{ steps.version.outputs.next_release }}" -F NEW_RELEASE.md ./dist/*.tar.gz ./dist/*.whl

      - name: Prerelease ${{ steps.version.outputs.next_prerelease }}
        id: github_prerelease
        if: ${{ (steps.set_prerelease.outcome == 'success') && (steps.commit.outcome == 'success') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prev_release="$(gh release list | grep -i latest | cut -f1)"
          prev_prerelease="$(gh release list | grep -i pre-latest | cut -f1)"
          echo "$prev_release $prev_prerelease"
          [[ "v${{ steps.version.outputs.next_prerelease }}" == "${prev_release}" ]] && exit 0
          [[ "v${{ steps.version.outputs.next_prerelease }}" == "${prev_prerelease}" ]] && exit 0
          git tag "v${{ steps.version.outputs.next_prerelease }}" -m "v${{ steps.version.outputs.next_prerelease }}"
          git push --follow-tags
          poetry build
          echo "" > NEW_RELEASE.md
          poetry run cz changelog --unreleased-version "v${{ steps.version.outputs.next_prerelease }}" --start-rev "${prev_release}" --file-name NEW_RELEASE.md || true
          gh release create "v${{ steps.version.outputs.next_prerelease }}" --prerelease -F NEW_RELEASE.md ./dist/*.tar.gz ./dist/*.whl

      - name: Publish distribution ðŸ“¦ to Test PyPI
        id: test_pypi
        if: ${{ (steps.github_release.outcome == 'success') || (steps.github_prerelease.outcome == 'success') }}
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI
        if: ${{ steps.test_pypi.outcome == 'success' }}
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
